// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async isServerRunning() : Promise<boolean> {
    return await TAURI_INVOKE("plugin:local-llm|is_server_running");
},
async isModelDownloaded() : Promise<boolean> {
    return await TAURI_INVOKE("plugin:local-llm|is_model_downloaded");
},
async isModelDownloading() : Promise<boolean> {
    return await TAURI_INVOKE("plugin:local-llm|is_model_downloading");
},
async downloadModel(channel: TAURI_CHANNEL<number>) : Promise<null> {
    return await TAURI_INVOKE("plugin:local-llm|download_model", { channel });
},
async startServer() : Promise<string> {
    return await TAURI_INVOKE("plugin:local-llm|start_server");
},
async stopServer() : Promise<null> {
    return await TAURI_INVOKE("plugin:local-llm|stop_server");
},
async listOllamaModels() : Promise<string[]> {
    return await TAURI_INVOKE("plugin:local-llm|list_ollama_models");
	},
	async listAvailableGgufModels(): Promise<string[]> {
		return await TAURI_INVOKE("plugin:local-llm|list_available_gguf_models")
	},
	async getActiveModelPath(): Promise<string> {
		return await TAURI_INVOKE("plugin:local-llm|get_active_model_path")
	},
	async setCustomModelPath(path: string | null): Promise<null> {
		return await TAURI_INVOKE("plugin:local-llm|set_custom_model_path", { path })
	},
	async selectModelFile(): Promise<string | null> {
		return await TAURI_INVOKE("plugin:local-llm|select_model_file")
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type TAURI_CHANNEL<TSend> = null

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
